name: Build and Deploy to Komodo

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-to-komodo:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Komodo
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.KOMODO_HOST }}
        username: ${{ secrets.KOMODO_USER }}
        key: ${{ secrets.KOMODO_SSH_KEY }}
        port: ${{ secrets.KOMODO_PORT }}
        script: |
          # Login to GitHub Container Registry
          echo ${{ secrets.TOKEN }} | sudo docker login ghcr.io -u ${{ secrets.USERNAME }} --password-stdin
          
          # Check if docker-compose.yml exists, if not create it
          if [ ! -f "/etc/komodo/stacks/crawlee-stack/docker-compose.yml" ]; then
            echo "üîß Creating docker-compose.yml..."
            sudo mkdir -p /etc/komodo/stacks/crawlee-stack
            sudo tee /etc/komodo/stacks/crawlee-stack/docker-compose.yml > /dev/null << 'EOF'
          services:
            crawlee-api:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
              container_name: crawlee-api
              restart: unless-stopped
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
                - PORT=3000
              healthcheck:
                test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              deploy:
                resources:
                  limits:
                    memory: 1G
                    cpus: '1.0'
                  reservations:
                    memory: 512M
                    cpus: '0.5'
              networks:
                - crawlee-network
          
          networks:
            crawlee-network:
              driver: bridge
          EOF
            sudo chown -R root:root /etc/komodo/stacks/crawlee-stack
            sudo chmod 644 /etc/komodo/stacks/crawlee-stack/docker-compose.yml
          else
            # Pull the latest image with new tag
            echo "üì• Pulling Docker image..."
            sudo docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            
            # Update the image tag in docker-compose.yml
            echo "üè∑Ô∏è  Updating image tag..."
            sudo sed -i "s|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" /etc/komodo/stacks/crawlee-stack/docker-compose.yml
          fi
          
          # Restart the stack using docker compose
          echo "üîÑ Restarting stack..."
          cd /etc/komodo/stacks/crawlee-stack
          sudo docker compose down
          sudo docker compose up -d
          
          # Wait for restart
          echo "‚è≥ Waiting for restart..."
          sleep 15
          
          # Check health with retries
          echo "üè• Checking service health..."
          for i in {1..5}; do
            if curl -f http://localhost:3004/health; then
              echo "‚úÖ Deployment successful - service is healthy"
              break
            else
              echo "‚è≥ Attempt $i/5: Service not ready yet, waiting..."
              sleep 5
            fi
          done
          
          # Final check
          if ! curl -f http://localhost:3004/health; then
            echo "‚ùå Deployment failed - service is not responding after 5 attempts"
            echo "üìã Container logs:"
            sudo docker logs crawlee-api --tail 20
            exit 1
          fi 